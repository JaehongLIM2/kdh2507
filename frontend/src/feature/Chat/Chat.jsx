import { useContext, useEffect, useRef, useState } from "react";
import { Client } from "@stomp/stompjs";
import SockJS from "sockjs-client";
import { AuthenticationContext } from "../common/AuthenticationContextProvider.jsx";
import { Col, Row } from "react-bootstrap";
import { v4 as uuidv4 } from "uuid";
import { useSearchParams } from "react-router";
import axios from "axios";

const WS_URL = "http://localhost:8080/ws-chat";
const WS_PATH = "/ws-chat";
const SEND_DEST = "/app/chat/private";
const SEND_DEST_GROUP = "/topic/chat/";
const SUBSCRIBE_DEST = "/user/queue/messages";

export function Chat() {
  const { user, isAdmin } = useContext(AuthenticationContext);
  const [target, setTarget] = useState(""); //ÏàòÏã†Ïûê id
  const [text, setText] = useState(""); // Î≥¥ÎÇº ÌÖçÏä§Ìä∏
  const [msgs, setMsgs] = useState([]); // Ï£ºÍ≥† Î∞õÏùÄ Î©îÏãúÏßÄÎì§
  const [lastMsgs, setLastMsgs] = useState([]); // Ï£ºÍ≥† Î∞õÏùÄ Î©îÏãúÏßÄÎì§
  const [roomUsers, setRoomUsers] = useState([]); // ÌòÑÏû¨ Î∞©Ïùò Ï†ëÏÜçÏûêÎì§1
  const [count, setCount] = useState(0);
  const clientRef = useRef(null); // STOMP Ïù∏Ïä§ÌÑ¥Ïä§ Îã¥ÏïÑ Îëò ÏÉÅÏûê
  const effectRan = useRef(false);
  const [searchParams] = useSearchParams();
  const roomId = searchParams.get("rid") || "2222";
  // const roomId = uuidv4();
  // const roomId = "2222";

  useEffect(() => {
    if (user?.name) {
      // ÎëêÎ≤à Ïã§Ìñâ ÎßâÍ∏∞
      if (user?.name && !effectRan.current) {
        setCount(count + 1);
        console.log("user : ", user);
        console.log("axios");
        axios
          .post("/api/chat/list", {
            roomId,
            userid: user.loginId,
            pageNum: 1,
          })
          .then((res) => {
            setLastMsgs(res.data.chatList);
            console.log("res", res.data);
          })
          .catch((err) => {
            console.log("Ïò§Î•ò");
          })
          .finally();
        const client = new Client({
          // webSocketFactory: () => new SockJS(WS_PATH), // SockJS Ïó∞Í≤∞
          webSocketFactory: () => {
            const token = localStorage.getItem("token");
            const url = token
              ? `${WS_PATH}?Authorization=Bearer%20${token}`
              : WS_PATH;
            return new SockJS(url);
          },
          debug: (str) => console.log("[STOMP]", str),
          reconnectDelay: 5000, // ÎÅäÍ∏∞Î©¥ 5Ï¥àÌõÑ Ïû¨Ïó∞Í≤∞
          connectHeaders: {
            username: user.name,
          },
        });
        client.onConnect = (frame) => {
          // Ïó∞Í≤∞ ÏÑ±Í≥µ Ïãú
          console.log("Ïó∞Í≤∞Îê®!", frame);
          client.subscribe(SUBSCRIBE_DEST, (message) => {
            // ÏÑúÎ≤ÑÏùò json Î©îÏãúÏßÄÎ•º ÌååÏã±Ìï¥ÏÑú msgs Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
            setMsgs((prev) => [...prev, JSON.parse(message.body)]);
          });

          console.log("rid : ", searchParams.get("rid"));
          console.log("roomId : ", roomId);

          client.subscribe(`/topic/chat/${roomId}`, (message) => {
            const data = JSON.parse(message.body);
            console.log("üì® Î∞© Î©îÏãúÏßÄ Î∞õÏùå:", data);
            if (data.type === "CHAT") {
              setMsgs((prev) => [...prev, JSON.parse(message.body)]);
            } else if (data.type === "ENTER") {
              console.log(`roomId : ${roomId}`);
              if (data.currentUsers) {
                setRoomUsers(data.currentUsers);
              }
              // ÏûÖÏû• Î©îÏãúÏßÄÎèÑ Ï±ÑÌåÖÏ∞ΩÏóê ÌëúÏãú
              setMsgs((prev) => [
                ...prev,
                {
                  from: "SYSTEM",
                  message: data.message,
                  timestamp: data.timestamp,
                  type: "SYSTEM",
                },
              ]);
            } else if (
              data.type === "LEAVE" ||
              data.type === "USER_DISCONNECTED"
            ) {
              if (data.currentUsers) {
                setRoomUsers(data.currentUsers);
              }
              // Ìá¥Ïû• Î©îÏãúÏßÄÎèÑ Ï±ÑÌåÖÏ∞ΩÏóê ÌëúÏãú
              setMsgs((prev) => [
                ...prev,
                {
                  from: "SYSTEM",
                  message: data.message,
                  timestamp: data.timestamp,
                  type: "SYSTEM",
                },
              ]);
            }
          });

          client.publish({
            destination: "/app/chat/enter", // ÏÑúÎ≤ÑÏùò MessageMapping Í≤ΩÎ°ú
            body: JSON.stringify({
              from: user.name, // ÎÇ¥ Ïù¥Î¶Ñ
              roomId: roomId, // Î∞© id (props, params Îì±ÏóêÏÑú Î∞õÏïÑÏôÄÏïº Ìï®)
              type: "ENTER", // ÌïÑÏöîÌïòÎã§Î©¥ typeÎèÑ Ìï®Íªò
              // ÌïÑÏöîÌïòÎ©¥ Îã§Î•∏ ÌïÑÎìúÎèÑ Ï∂îÍ∞Ä
            }),
          });
        };

        client.onDisconnect = () => {
          console.log("ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§");
        };

        // Ïó∞Í≤∞ ÌôúÏÑ±Ìôî(connect ÏãúÎèÑ)
        client.activate();
        // ÌõÖ Î∞ïÏóêÏÑúÎèÑ Ïì∞Í∏∞ ÏúÑÌï¥ refÏóê Ï†ÄÏû•
        clientRef.current = client;

        // Ïñ∏ÎßàÏö¥Ìä∏ Îê† Îïå
        return () => {
          if (client && client.connected) {
            client.publish({
              destination: "/app/chat/leave", // ÏÑúÎ≤Ñ MessageMapping Í≤ΩÎ°ú
              body: JSON.stringify({
                from: user.name,
                roomId: roomId,
                type: "LEAVE", // ÏÑúÎ≤Ñ DTOÏôÄ ÎßûÏ∂îÍ∏∞!
              }),
            });
          }
          client.deactivate(); //Ïó∞Í≤∞ Ìï¥Ï†ú
        };
      }
    }
  }, [user]);

  function handleChattingOutClick() {
    if (clientRef.current && clientRef.current.connected) {
      clientRef.current.publish({
        destination: "/app/chat/leave", // ÏÑúÎ≤Ñ MessageMapping Í≤ΩÎ°ú
        body: JSON.stringify({
          from: user.name,
          roomId: roomId,
          type: "LEAVE", // ÏÑúÎ≤Ñ DTOÏôÄ ÎßûÏ∂îÍ∏∞!
        }),
      });
    }
    clientRef.current.deactivate(); //Ïó∞Í≤∞ Ìï¥Ï†ú
  }

  const sendMessage = () => {
    if (!text.trim()) return; // Í∞í ÏóÖÏäπÎ©¥ Í∑∏ÎÉ• Î∞òÌôò
    // Î≥¥ÎÇº Î©îÏãúÏßÄ Í∞ùÏ≤¥
    const chatMsg = { from: user.name, to: target, message: text };
    // SEND_DESTÎ°ú ÌååÏùº Ï†ÑÏÜ°

    clientRef.current.publish({
      destination: SEND_DEST,
      body: JSON.stringify(chatMsg),
    });
    // setMsgs((prev) => [...prev, chatMsg]);
    setText(""); // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
  };

  const sendGroupMessage = () => {
    if (!text.trim()) return;
    const chatMsg = {
      from: user.name,
      userid: user.id,
      message: text,
      type: "CHAT",
    };
    clientRef.current.publish({
      destination: "/app/chat/" + roomId,
      // destination: SEND_DEST_GROUP + roomId,
      body: JSON.stringify(chatMsg),
    });
    setText(""); // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
  };

  useEffect(() => {}, []);

  if (!user) {
    return <span className="loading loading-spinner"></span>;
  }

  return (
    <div style={{ padding: 20, fontFamily: "sans-serif" }}>
      <Row className="justify-content-center">
        <Col md={8} lg={9} className="mt-5">
          <div className="container">
            {/*<h2>1:1 ÏÉÅÎã¥ ({user.name})</h2>*/}

            {/*Ï±ÑÌåÖ Î°úÍ∑∏*/}
            <div className="border rounded-t-lg chat chat-head border-b p-2.5 border-gray-300">
              <h2>1:1 ÏÉÅÎã¥ ÏÑúÎπÑÏä§</h2>
            </div>
            <div className="border border-gray-300  h-150 overflow-y-auto">
              <div className="chat chat-main p-2.5 ">
                {/*ÎçîÎØ∏ div*/}
                {/*ÏÇ≠Ï†ú x */}
                <div className="chat chat-start"></div>
                <div className="chat chat-end"></div>
                {lastMsgs.toReversed().map((m, i) => (
                  <div
                    key={i}
                    className={`chat chat-${user.name == m.user ? "end" : "start"}`}
                  >
                    <div className="chat-header">{m.user}</div>
                    <div className="chat-bubble">{m.message}</div>
                  </div>
                ))}
                {msgs.map((m, i) =>
                  m.type == "CHAT" ? (
                    <div
                      key={i}
                      className={`chat chat-${user.name == m.from ? "end" : "start"}`}
                    >
                      <div className="chat-header">{m.from}</div>
                      <div className="chat-bubble">{m.message}</div>
                    </div>
                  ) : (
                    <div key={i} className="flex w-full flex-col">
                      <div className="divider before:bg-gray-300 after:bg-gray-300 text-gray-400 text-xs">
                        {m.message}
                      </div>
                    </div>
                  ),
                )}
              </div>
            </div>
            <div className="chat chat-footer border rounded-b-lg p-2 border-gray-300 bg-white mb-2.5 flex items-center gap-2.5">
              <input
                placeholder="Î©îÏãúÏßÄ ÏûÖÎ†•"
                value={text}
                onChange={(e) => setText(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && sendGroupMessage()}
                className="flex-1 text-[1rem] focus:outline-none mx-2"
              />
              <button
                className="btn btn-primary ml-auto"
                onClick={sendGroupMessage}
              >
                Ï†ÑÏÜ°
              </button>
            </div>
            {/* <input
              placeholder="ÏÉÅÎåÄÎ∞© ÏïÑÏù¥Îîî"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              style={{ marginRight: 10 }}
            />*/}
            {/*<input
              placeholder="Î©îÏãúÏßÄ ÏûÖÎ†•"
              value={text}
              onChange={(e) => setText(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && sendMessage()}
              style={{ width: "40%", marginRight: 10 }}
            />*/}
            {/*<button
              className={"btn btn-outline btn-primary"}
              onClick={sendMessage}
            >
              Ï†ÑÏÜ°
            </button>*/}

            {clientRef.current && (
              <button
                className={"btn btn-error"}
                onClick={() => handleChattingOutClick()}
              >
                ÎåÄÌôî Ï¢ÖÎ£å
              </button>
            )}
          </div>
        </Col>
      </Row>
    </div>
  );
}
